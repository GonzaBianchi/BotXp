// utils/roleManager.js
/**
 * Sistema de gesti√≥n de roles basados en niveles
 * Los roles se asignan cada 5 niveles y son exclusivos entre s√≠
 */

// Definici√≥n de los roles por nivel
export const LEVEL_ROLES = [
    { minLevel: 30, roleName: "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äéùì®ùì∏ùì∑ùì¥ùì∏ùìæ„Äè‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" },
    { minLevel: 25, roleName: "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äéùìíùì∏ùì∂ùì™ùì∑ùì≠ùì™ùì∑ùìΩùìÆ„Äè‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" },
    { minLevel: 20, roleName: "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äéùì¢ùì±ùì≤ùì¨ùì±ùì≤ùì´ùìæùì¥ùì™ùì≤„Äè‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" },
    { minLevel: 15, roleName: "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äéùì¢ùìæùìπùìÆùìª ùìùùì∏ùìøùì™„Äè‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" },
    { minLevel: 10, roleName: "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äéùìüùì≤ùìªùì™ùìΩùì™„Äè‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" },
    { minLevel: 5, roleName: "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äéùìêùìπùìªùì∑ùì≠ùì≤ùì©„Äè‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" }
  ];
  
  /**
   * Obtiene el rol correspondiente seg√∫n el nivel del usuario
   * @param {number} level - Nivel del usuario
   * @returns {Object|null} Objeto con informaci√≥n del rol o null si no corresponde ning√∫n rol
   */
  export function getRoleForLevel(level) {
    // Buscamos el primer rol que corresponda al nivel (ordenados de mayor a menor)
    return LEVEL_ROLES.find(role => level >= role.minLevel) || null;
  }
  
  /**
   * Actualiza los roles del usuario seg√∫n su nivel
   * @param {Object} member - Objeto member de Discord.js
   * @param {number} level - Nivel actual del usuario
   * @returns {Promise<Object>} - Resultado de la actualizaci√≥n {success, added, removed}
   */
  export async function updateMemberRoles(member, level) {
    try {
      // Obtener el rol correspondiente al nivel actual
      const currentLevelRole = getRoleForLevel(level);
      
      // Lista para almacenar los resultados
      const result = {
        success: false,
        added: null,
        removed: []
      };
      
      // Si el usuario no tiene nivel suficiente para ning√∫n rol, quitamos todos los roles de nivel
      if (!currentLevelRole) {
        // Quitar todos los roles de nivel si existen
        for (const roleConfig of LEVEL_ROLES) {
          const role = member.guild.roles.cache.find(r => r.name === roleConfig.roleName);
          if (role && member.roles.cache.has(role.id)) {
            await member.roles.remove(role);
            result.removed.push(roleConfig.roleName);
          }
        }
        result.success = true;
        return result;
      }
      
      // Buscar el rol correspondiente en el servidor
      const roleToAdd = member.guild.roles.cache.find(r => r.name === currentLevelRole.roleName);
      
      // Si el rol no existe en el servidor, retornar error
      if (!roleToAdd) {
        return {
          success: false,
          error: `El rol "${currentLevelRole.roleName}" no existe en el servidor`
        };
      }
      
      // Quitar roles de nivel anteriores (si los tiene)
      for (const roleConfig of LEVEL_ROLES) {
        // Saltamos el rol que vamos a a√±adir
        if (roleConfig.roleName === currentLevelRole.roleName) continue;
        
        const role = member.guild.roles.cache.find(r => r.name === roleConfig.roleName);
        if (role && member.roles.cache.has(role.id)) {
          await member.roles.remove(role);
          result.removed.push(roleConfig.roleName);
        }
      }
      
      // A√±adir el nuevo rol si no lo tiene
      if (!member.roles.cache.has(roleToAdd.id)) {
        await member.roles.add(roleToAdd);
        result.added = currentLevelRole.roleName;
      }
      
      result.success = true;
      return result;
    } catch (error) {
      console.error('Error actualizando roles:', error);
      return {
        success: false,
        error: 'Error actualizando roles',
        details: error.message
      };
    }
  }